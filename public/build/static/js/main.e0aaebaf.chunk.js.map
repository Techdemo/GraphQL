{"version":3,"sources":["Context/AuthContext.js","Partials/Nav/styled.js","Partials/Nav/Nav.js","Pages/UsersPage/styled.js","Pages/UsersPage/UsersPage.js","Pages/LoginPage/components/styled.js","Pages/LoginPage/components/LoginForm.js","Pages/LoginPage/components/SignupForm.js","Pages/LoginPage/styled.js","Pages/LoginPage/LoginPage.js","Pages/AccountPage/styled.js","Pages/AccountPage/AccountPage.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","AuthProvider","children","useState","token","setToken","userId","setUserId","tokenExpiration","setTokenExpiration","username","setUsername","Provider","value","login","reqBody","fetch","method","body","JSON","stringify","headers","then","res","json","response","console","log","data","name","catch","err","logout","useAuth","useContext","Header","styled","header","NavContainer","nav","ListContainer","ul","LinkContainer","li","Title","h1","LogoutButton","button","Subtitle","h2","Nav","className","to","onClick","Container","div","UserContainer","UserTitle","h3","UserAge","p","UsersPage","users","setUsers","useEffect","query","status","Error","resData","map","user","index","key","age","Form","form","CreateAccountForm","Fieldset","fieldset","Label","label","Input","input","Button","AlertText","active","AlertTextContainer","LoginForm","validationError","setValidationError","emailEl","useRef","passwordEl","onSubmit","event","preventDefault","email","current","trim","password","length","setTimeout","htmlFor","type","id","ref","SignupForm","cityEl","ageEl","nameEl","city","alert","LoginPage","toggleLogin","setToggleLogin","AccountPage","React","Main","sessionToken","setSessionToken","from","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e0aaebaf.chunk.js","sourcesContent":["import React, { useContext, createContext, useState } from 'react';\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const [token, setToken] = useState(null)\n  const [userId, setUserId] = useState(null)\n  const [tokenExpiration, setTokenExpiration] = useState(null)\n  const [username, setUsername] = useState(null)\n\n  const login = (reqBody) => {\n    const url = '/graphql'\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(reqBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n          return res.json()\n      })\n      .then(response => {\n        console.log(\"response\", response)\n        if (response.data.login) {\n          setToken(response.data.login.token)\n          setUserId(response.data.login.userId)\n          setTokenExpiration(response.data.login.tokenExpiration)\n          setUsername(response.data.login.name)\n        }\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  const logout = () => {\n    setToken(null)\n    setUserId(null)\n    setTokenExpiration(null)\n    setUsername(null)\n  }\n\n  return <AuthContext.Provider value={{\n    tokenExpiration,\n    setTokenExpiration,\n    userId,\n    setUserId,\n    token,\n    setToken,\n    login,\n    logout,\n    username\n  }}>\n    {children}\n  </AuthContext.Provider>\n}\n\nexport const useAuth = () => useContext(AuthContext)","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  max-width: 100%;\n  display: flex;\n  justify-content: space-between;\n  background-color: #231651;\n  padding-left: 1.5em;\n  padding-right: 1.5em;\n  align-items: center;\n`;\n\nexport const NavContainer = styled.nav`\n  display: flex;\n  height: 4.5em;\n  width: 25%;\n  justify-content: flex-end;\n`;\n\nexport const ListContainer = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  list-style-type: none;\n  width: 100%;\n`;\n\nexport const LinkContainer = styled.li`\n  color: #F3D9DC;\n  text-decoration: none;\n  text-indent: -20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Title = styled.h1`\n  font-size: 2.5em;\n  font-family: 'Proza Libre', sans-serif;\n  font-weight: 500;\n  color: #F3D9DC;\n`;\n\nexport const LogoutButton = styled.button`\n  color: #F3D9DC;\n  border: none;\n  font-family: 'Open Sans', sans-serif;\n  text-decoration: none;\n  font-size: 1.5em;\n  font-weight: 300;\n  background-color: #231651;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nexport const Subtitle = styled.h2`\n  font-size: 1;.5em;\n  font-family: 'Proza Libre', sans-serif;\n  font-weight: 500;\n  color: #F3D9DC;\n`;","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { NavContainer, ListContainer, Title, LinkContainer, Header, LogoutButton, Subtitle } from './styled'\nimport { useAuth } from '../../Context/AuthContext';\n\nconst Nav = () => {\n  const {\n    token,\n    logout,\n    username\n  } = useAuth()\n\n  return (\n    <Header>\n      <Title>Dating App</Title>\n      <Subtitle>{username}</Subtitle>\n      <NavContainer>\n        <ListContainer>\n          {token && (\n            <>\n              <LinkContainer>\n                <NavLink className=\"navLink\" to=\"/users\">Users</NavLink>\n              </LinkContainer>\n              <LinkContainer>\n                <NavLink className=\"navLink\" to=\"/account\">My account</NavLink>\n              </LinkContainer>\n              <LinkContainer>\n                <LogoutButton onClick={logout}>log out</LogoutButton>\n              </LinkContainer>\n            </>\n          )}\n          {!token && (\n            <LinkContainer>\n              <NavLink className=\"navLink\" to=\"/login\">login</NavLink>\n            </LinkContainer>\n          )}\n        </ListContainer>\n      </NavContainer>\n    </Header>\n  )\n}\n\nexport default Nav","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  margin-top: 1.5em;\n`;\n\nexport const Title = styled.h1`\n  font-size: 2.5em;\n  font-family: 'Proza Libre', sans-serif;\n  font-weight: 500;\n  color: #100B00;\n`;\n\nexport const UserContainer = styled.div`\n  padding: 1.5em;\n  display: flex;\n  flex-direction: column;\n  background-color: #E7E6F7;\n  width: 25%;\n  border-radius: 5px;\n  margin-bottom: 1.2em;\n`;\n\nexport const UserTitle = styled.h3`\n  font-family: 'Proza Libre', sans-serif;\n  font-size: 1.5em;\n  color: #100B00;\n  font-weight: 500;\n`;\n\nexport const UserAge = styled.p`\n  font-family: 'Open Sans', sans-serif;\n  font-size: 1.2em;\n  color: #100B00;\n  font-weight: 300;\n`;","import React, { useEffect, useState } from 'react';\n\nimport { Title, UserContainer, Container, UserTitle, UserAge } from './styled';\n\nconst UsersPage = () => {\n  const [users, setUsers] = useState([])\n\n  useEffect(() => {\n    const requestBody = {\n      query: `\n        query {\n          users {\n            age\n            name\n          }\n        }\n        `\n    };\n\n    fetch('/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        setUsers(resData.data.users)\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, [])\n\n  return (\n    <>\n      {console.log(\"users\", users)}\n      <Title>Users</Title>\n      <Container>\n        {users.map((user, index) =>\n          <UserContainer key={index}>\n            <UserTitle>Naam: {user.name}</UserTitle>\n            <UserAge>Leeftijd: {user.age}</UserAge>\n          </UserContainer>)}\n      </Container>\n    </>\n  )\n}\n\nexport default UsersPage","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  min-height: 250px;\n  max-width: 500px;\n`\nexport const CreateAccountForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  min-height: 450px;\n  max-width: 500px;\n`\n\nexport const Fieldset = styled.fieldset`\n  display: flex;\n  align-content: flex-end;\n`\n\nexport const Label = styled.label`\n  margin-right: 1em;\n  font-family: OpenSans-Regular;\n  font-size: 16px;\n  color: #100B00;\n`\n\nexport const Input = styled.input`\n  border: 0;\n  outline: 0;\n  background: transparent;\n  border-bottom: 1px solid #E7E6F7;\n  padding: 0.75em 1.25em;\n  font-size: 16px;\n  font-family: OpenSans-Regular;\n  transition: all 0.2s ease-in;\n  width: 100%;\n\n  :focus {\n    outline: none;\n    background: transparent;\n    border-bottom: 1px solid #231651;\n  }\n\n`\n\nexport const Button = styled.button`\n  font-family: OpenSans-Regular;\n  font-size: 16px;\n  color: #100B00;\n  background: #E7E6F7;\n  border-radius: 5px;\n  outline: none;\n  border: none;\n  border-radius: 5px;\n  height: 40px;\n  width: 135px;\n  text-align: center;\n  transition: linear background-color 0.2s;\n  margin-top: 0.5em;\n  margin-bottom: 0.25em;\n\n  :hover {\n    cursor: pointer;\n    background-color: #C0BDF5;\n  }\n\n  :active {\n    border: 1px solid #231651;\n  }\n`;\n\nexport const AlertText = styled.p`\n  color: red;\n  font-family: OpenSans-Regular;\n  font-size: 16px;\n  opacity: 0;\n  transition: all 0.2s linear;\n\n  ${({ active }) => active && `\n    opacity: 1;\n`}\n`;\n\nexport const AlertTextContainer = styled.div`\n  height: 18px;\n  margin-top: 0.5em;\n`","import React, { useRef, useState } from 'react'\nimport { useAuth } from '../../../Context/AuthContext';\n\nimport { Form, Label, Button, Fieldset, Input, AlertText, AlertTextContainer } from './styled';\n\nconst LoginForm = () => {\n  const [validationError, setValidationError] = useState(false)\n  const emailEl = useRef('')\n  const passwordEl = useRef('')\n\n  const {\n    login\n  } = useAuth()\n\n  const submitHandler = event => {\n    event.preventDefault()\n    const email = emailEl.current.value.trim()\n    const password = passwordEl.current.value.trim()\n\n    if (email.length === 0 || password.length === 0) {\n      setValidationError(true)\n      setTimeout(() => setValidationError(false), 2000)\n      return;\n    }\n\n    let reqBody = {\n      query: `\n        query {\n          login (email:\"${email}\", password: \"${password}\") {\n            token\n            userId\n            tokenExpiration\n            name\n          }\n        }\n      `\n    }\n    login(reqBody)\n  }\n\n\n  return (\n    <>\n      <AlertTextContainer>\n        <AlertText active={validationError}>*Please fill in all of the form fields</AlertText>\n      </AlertTextContainer>\n      <Form onSubmit={submitHandler}>\n        <Fieldset>\n          <Label htmlFor=\"email\">E-mail:</Label>\n          <Input type=\"email\" id=\"email\" ref={emailEl} />\n        </Fieldset>\n        <Fieldset>\n          <Label htmlFor=\"password\">Password:</Label>\n          <Input type=\"password\" id=\"password\" ref={passwordEl} />\n        </Fieldset>\n        <Fieldset>\n          <Button type=\"submit\">Login</Button>\n        </Fieldset>\n      </Form>\n    </>\n  )\n}\n\nexport default LoginForm","import React, { useRef, useState } from 'react'\nimport { useAuth } from '../../../Context/AuthContext';\n\nimport { CreateAccountForm, Label, Button, Fieldset, Input, AlertText, AlertTextContainer } from './styled';\n\nconst SignupForm = () => {\n  const [validationError, setValidationError] = useState(false)\n  const emailEl = useRef('')\n  const passwordEl = useRef('')\n  const cityEl = useRef('')\n  const ageEl = useRef('')\n  const nameEl = useRef('')\n\n  const {\n    login\n  } = useAuth()\n\n  const url = '/graphql'\n\n  const submitHandler = event => {\n    event.preventDefault()\n    const email = emailEl.current.value.trim()\n    const password = passwordEl.current.value.trim()\n    const city = cityEl.current.value.trim()\n    const age = ageEl.current.value.trim()\n    const name = nameEl.current.value.trim()\n\n    if (email.length === 0 ||\n      password.length === 0 ||\n      city.length === 0 ||\n      age.length === 0 ||\n      name.length === 0) {\n      setValidationError(true)\n      setTimeout(() => setValidationError(false), 2000)\n      return;\n    }\n\n    const reqBody = {\n      query: `\n          mutation {\n            createUser(userInput: {email: \"${email}\", name: \"${name}\", password: \"${password}\", age: ${age}, city: \"${city}\"}) {\n              id\n              email\n            }\n          }\n        `\n    };\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(reqBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status === 200) {\n          return res.json()\n        } else {\n          throw new Error('Sukkel', Error)\n        }\n      })\n      .then(data => {\n        let query = {\n          query: `\n            query {\n              login (email:\"${email}\", password: \"${password}\") {\n                token\n                userId\n                tokenExpiration\n                name\n              }\n            }\n          `\n        }\n        login(query)\n      })\n    .catch(err => {\n      console.log(err)\n      alert(err)\n    })\n  }\n\n  return (\n    <>\n      <AlertTextContainer>\n        <AlertText active={validationError}>*Please fill in all of the form fields</AlertText>\n      </AlertTextContainer>\n      <CreateAccountForm onSubmit={submitHandler}>\n        <Fieldset>\n          <Label htmlFor=\"name\">First Name</Label>\n          <Input type=\"name\" id=\"name\" ref={nameEl} />\n        </Fieldset>\n        <Fieldset>\n          <Label htmlFor=\"email\">E-mail</Label>\n          <Input type=\"email\" id=\"email\" ref={emailEl} />\n        </Fieldset>\n        <Fieldset>\n          <Label htmlFor=\"password\">password</Label>\n          <Input type=\"password\" id=\"password\" ref={passwordEl} />\n        </Fieldset>\n        <Fieldset>\n          <Label htmlFor=\"city\">City</Label>\n          <Input type=\"text\" id=\"city\" ref={cityEl} />\n        </Fieldset>\n        <Fieldset>\n          <Label htmlFor=\"age\">age</Label>\n          <Input type=\"number\" id=\"age\" ref={ageEl} />\n        </Fieldset>\n        <Fieldset>\n          <Button type=\"submit\">Signup</Button>\n        </Fieldset>\n      </CreateAccountForm>\n    </>\n  )\n}\n\nexport default SignupForm","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  font-family: ProzaLibre-Medium;\n  font-size: 48px;\n  color: #100B00;\n`;\n\nexport const Button = styled.button`\n  font-family: OpenSans-Regular;\n  font-size: 16px;\n  color: #100B00;\n  text-decoration: underline;\n  outline: none;\n  border: none;\n  text-align: center;\n  transition: ease-in background-color 0.2s;\n\n  :hover {\n    cursor: pointer;\n    background-color: #E7E6F7;\n  }\n`;","import React, { useState } from 'react'\nimport LoginForm from './components/LoginForm';\nimport SignupForm from './components/SignupForm';\n\nimport { Title, Button } from './styled';\n\nconst LoginPage = () => {\n  const [toggleLogin, setToggleLogin] = useState(true)\n\n  return (\n    <>\n      <Title>{toggleLogin ? 'Login' : 'Create account'}</Title>\n      {toggleLogin ? (\n        <LoginForm />\n      ) : (\n        <SignupForm />\n      )}\n      <Button onClick={() => setToggleLogin(!toggleLogin)}>I want to {toggleLogin ? 'create an account' : 'login to my account'} </Button>\n    </>\n  )\n}\n\nexport default LoginPage","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  font-family: ProzaLibre-Medium;\n  font-size: 48px;\n  color: #100B00;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  margin-top: 1.5em;\n`;","import React, { useEffect } from 'react'\n// import { useAuth } from '../../../Context/AuthContext';\n\nimport { Title, Container } from './styled';\n\nconst AccountPage = () => {\n  const [user, setUser] = React.useState('')\n  // const {\n  //   userId\n  // } = useAuth()\n\n  // useEffect(() => {\n\n  //   const url = 'http://localhost:3001/graphql'\n  //   fetch(url, {\n  //     method: 'POST',\n  //     body: JSON.stringify(reqBody),\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     }\n  //   })\n  //   .then(res => {\n  //     if(res.status === 200) {\n  //       return res.json()\n  //     } else {\n  //       throw new Error('Sukkel')\n  //     }\n  //   })\n  //   .then(response => {\n  //     console.log(\"response\", response.data)\n  //   })\n  // }, [])\n\n  return (\n    <Container>\n      <Title>My Account</Title>\n    </Container>\n  )\n}\n\nexport default AccountPage","import React from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\n\nimport UsersPage from './Pages/UsersPage/UsersPage';\nimport LoginPage from './Pages/LoginPage/LoginPage';\nimport AccountPage from './Pages/AccountPage/AccountPage'\n\nimport { useAuth } from './Context/AuthContext';\n\nconst Main = () => {\n  const {\n    token\n  } = useAuth()\n  const [sessionToken, setSessionToken] = React.useState(null)\n\n  React.useEffect(() => {\n    setSessionToken(token)\n  }, [token])\n\n  return (\n    <main>\n      <Switch>\n        {sessionToken && <Redirect from=\"/\" to=\"/users\" exact />}\n        {sessionToken && (\n          <Redirect from=\"/login\" to=\"/users\" exact />\n        )}\n        {!sessionToken && (\n          <Redirect from=\"/users\" to=\"/login\" exact />\n        )}\n        {!sessionToken && (\n          <Redirect from=\"/account\" to=\"/login\" exact />\n        )}\n        {!sessionToken && (\n          <Route path=\"/login\" component={LoginPage} />\n        )}\n        <Route path=\"/account\" component={AccountPage} />\n        <Route path=\"/users\" component={UsersPage} />\n        {!sessionToken && <Redirect to=\"/login\" exact />}\n      </Switch>\n    </main>\n  );\n}\n\nexport default Main;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AuthProvider } from './Context/AuthContext';\n\nimport Nav from './Partials/Nav/Nav';\n\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <AuthProvider>\n        <Nav />\n        <Main />\n      </AuthProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}